{"data":{"hero":{"edges":[{"node":{"frontmatter":{"title":"Hi, my name is","name":"Varun","subtitle":"I build things for the web.","contactText":"Get In Touch"},"html":"<p>I'm a self taught developer based in New Delhi, India specializing in building exceptional, high-quality websites and applications.</p>"}}]},"about":{"edges":[{"node":{"frontmatter":{"title":"About Me","avatar":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='400' height='400'%3e%3cpath d='M168 2a115 115 0 0 0-25 5c-6 1-8 2-14 7-4 3-6 6-5 6 1 1 0 2-2 4-5 4-7 12-6 21a245 245 0 0 0 14 46l4 12c3 9 3 15 1 18l-1 3h-1c-1-1-2 0-6 4l-4 4 3 2c2 1 2 1 1 2l-3-1c-1-1-3-1-2 1l-3 4-1-2c0-1-1-1-2 1-2 1-3 3-2 3 2 3 2 5 1 5-2-1-4 2-3 3l-4 4c-2 0-4 4-3 5l-1 1h-1c2 2 0 4-1 2h-1v2h-1c-1 2-5 2-6 1h-1l-1 2-2 2-1 1c0-1-1-1-3 1l-6 3-5 3-2 1-1 1-1 2c-3 3-5 7-5 13l-1 5 2-4c1-2 2-3 3-2l2-1 1-1h1v-3c0-2 0-2-1 0h-2c0-2 9-11 13-13l2-1 1 1h1l-1 1c-2 0-5 5-4 6l-1 1v1l-1 1c-2 0-2 3 0 5l2 3 1 2 1-2c0-2 0-2 2-2 1 1 1 0 1-3-1-3 0-4 1-4 2 0 2-1 2-3l1-2 1-2h4l1-1-1 3v6l-1 2-1 3-1 1c-2 0-1 2 1 2v3c1 1 1 1-1 1-2-1-2-1-1 2v5l-1 1-1 2c1 1 0 2-1 2v5l-1 2-2 2-1 1v2c-1 1 0 1 1 1s2 0 1 1v10c1 1 1 1-1 1h-2l3 1c2 1-3 1-10 1H62l-3 40c-2 30-2 32-4 31-2 0-3 0-4 4a349 349 0 0 0 0 62v2l2 1 5 4 5 4 1 1 2 3c1 1 0 4-2 3l-2 1-2 1-3-1-4-2-2-1c0 1 1 5 2 4l2 2v2l-1 2h5a9070 9070 0 0 0 244-1c-3-3-2-6 0-6 3 0 5 2 5 4v2l2 1h5l6-1c2 0 2-1 2-3 0-4 5-4 7 0 1 2 2 2 4 2 4-1 5-2 3-4-2-1-2-2-2-3l9-1c4-1 4-1 4-3s-5-4-6-3h-13c-2-3 2-8 4-6 3 2 3 0 1-3s-4-5-4-2l-5 1c-4-1-5-1-5 1l-1 1c-2 0-2-3 0-6l2-6c1-3 5-4 5-2s3 4 4 3l1-5c-2 0-3-7-2-9 2-2 2-2 0-4s-2-2-3 0c-2 5-4 6-15 5-3 0 0-3 3-5 4-1 5-2 5-6s0-5 3-6c5-1 7 0 7 4 0 2 1 2 3 1s2-4 1-5c-2-1-1-6 1-7s2-2-2-3c-2-1-4 0-5 1l-3 2-1-2-3-3c-2 0-2 1-2 5 0 7-1 8-2 4l-4-5-4-3-4-2c-2 0-4-3-3-5l-1-2-1 1-2 2-4 3-1 3h3c5-1 6 0 6 2v4c1 2 2 4 1 5-1 3-3 4-3 1 0-2 0-2-5-2-8 1-12 3-12 7l-1 6-1-1-1-1c-1 0-2-1-1-2l-3-4c-2 0-10 8-12 11l-1 2-3-3c-3-3-7-3-5 1l-1 2-4 4-3 3v-15c0-2 0-2-2-2l-2 2-2 2c-2 0-2-2-1-3v-2c-1-2-2-8 0-9s1-3-1-2l-2 3c0 3 0 3-3 3l-5 2c-4 1-7 1-5-2v-8c0-3 0-4-2-6s-2-2-1-3c2-1 3-3 1-5-4-3-2-67 3-79 3-10 3-14-2-26-5-15-15-38-18-42s-12-10-13-9l-1-1-1-2-3-4c-2-4-2-4-1-10 2-8 5-16 8-18l21-6c4-1 8-5 8-7l-2-5-2-7-1-4-1-7 1-6c2-2 1-7-1-9-2-1-2-2-1-2v-1c-2 0-2 0-1-2v-3l1-1c2 0 0-6-4-12l-6-10-2-4 2-4c3-4 3-14-1-19-2-3-11-8-16-9l-4-1c-2-1-6-2-16-1m121 336c1 1 0 3-4 18-2 7-1 8 5 7 5 0 7-1 7-5l1-9c2-7-1-13-6-13-2 0-3 1-3 2m-22 25l-7 3h-4c0-3-2-2-3 1l-4 2c-2 0-2 0 1 5 2 3 4 4 3 0 0-2 0-2 2-1s2 1 4-1c1-2 3-1 1 2-1 2 0 2 3 2 6 1 7 4 4 7l-2 3 4-2c1-1 5-1 9 1 3 1 2-2 0-4s-2-2-1-3c2-1 2-2 2-3v-3c0-2 3-3 3-1l1 2v-6c2-1 2-2 1-2l-5-2h-12m47 0l-3 1c-1-2-7 0-8 2 0 2 0 2-1 0h-3l-6 2c-4 1-5 2-3 4 1 1 2 1 5-1h4c1 1 1 1-1 2l-2 2-1 1c-2 1 0 4 2 4v5l2-2c1-2 3 0 3 2s1 2 3 2l5-2c2 0 3-3 1-5v-5h1c1 1 2-2 1-5s-1-4 3-3c2 0 3 0 3-2 1-3-1-4-5-2' fill='%2364ffda' fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1,"src":"/static/92b6f14c78faeca823577de6069e4edd/ed516/me.jpg","srcSet":"/static/92b6f14c78faeca823577de6069e4edd/7fd17/me.jpg 175w,\n/static/92b6f14c78faeca823577de6069e4edd/804d2/me.jpg 350w,\n/static/92b6f14c78faeca823577de6069e4edd/ed516/me.jpg 700w,\n/static/92b6f14c78faeca823577de6069e4edd/104dc/me.jpg 1050w,\n/static/92b6f14c78faeca823577de6069e4edd/abebb/me.jpg 1400w,\n/static/92b6f14c78faeca823577de6069e4edd/77599/me.jpg 2896w","srcWebp":"/static/92b6f14c78faeca823577de6069e4edd/93ec8/me.webp","srcSetWebp":"/static/92b6f14c78faeca823577de6069e4edd/61503/me.webp 175w,\n/static/92b6f14c78faeca823577de6069e4edd/850cb/me.webp 350w,\n/static/92b6f14c78faeca823577de6069e4edd/93ec8/me.webp 700w,\n/static/92b6f14c78faeca823577de6069e4edd/fbd0c/me.webp 1050w,\n/static/92b6f14c78faeca823577de6069e4edd/f0780/me.webp 1400w,\n/static/92b6f14c78faeca823577de6069e4edd/cf49e/me.webp 2896w","sizes":"(max-width: 700px) 100vw, 700px"}}},"skills":["JavaScript (ES6+)","HTML & (S)CSS","React","Node.js","Express","GraphQL","Progressive Web Apps","Git & Github"]},"html":"<p>Hello! I'm Varun, a web developer based in New Delhi, India who enjoys building things that live on the internet. I develop exceptional websites and web apps leveraging some cutting edge web technologies with efficient and modern backends.</p>\n<p>I am both driven, self-motivated, and constantly explores new technologies and techniques. I love to work on open source projects and strive to better myself as a developer, and the development community as a whole.</p>\n<p>Here's a few technologies I've been working with recently:</p>"}}]},"featured":{"edges":[{"node":{"frontmatter":{"title":"Vuzuk","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='400' height='199'%3e%3cpath d='M0 100l1 66v-34h399v33l1-66V0H0v100m0 0c0 55 1 71 1 37V75h46l47 1v17l1 17h7V93l1-17h3c3 0 4-1 4-4v-3l-55-1H1V34l-1 66M372 7v10h24V7h-24m-110 5l1 5h60V7h-61v5M156 68l-6 4c-9 10-8 30 3 36 7 4 20 2 20-3 0-4-2-7-2-5l-5 2c-8 2-14-3-14-14 0-10 7-15 16-11l5 2v-5c0-4 0-4-3-6h-14m-39 21v21h19v-8h-11V92h11v-7h-11v-9h11v-8h-19v21m63 0l1 20 4 1h3V92h13v9l1 9h198v-8H209V69h-7l-1 8v8h-13V68h-8v21m-14 83v6h26v-10l-13-1h-13v5m205-4l-1 5v5h26v-10l-13-1-12 1m-158 1c-4 2-5 8-2 12 7 6 17-3 11-10-2-2-6-3-9-2m-47 26v4h26v-9h-26v5m204 0v4h26v-9h-26v5' fill='%2364ffda' fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":2.014644351464435,"src":"/static/da35d9af2571d2a1c6262a5511cae04e/e8606/vuzuk.png","srcSet":"/static/da35d9af2571d2a1c6262a5511cae04e/53aff/vuzuk.png 175w,\n/static/da35d9af2571d2a1c6262a5511cae04e/1844f/vuzuk.png 350w,\n/static/da35d9af2571d2a1c6262a5511cae04e/e8606/vuzuk.png 700w,\n/static/da35d9af2571d2a1c6262a5511cae04e/d1907/vuzuk.png 963w","srcWebp":"/static/da35d9af2571d2a1c6262a5511cae04e/93ec8/vuzuk.webp","srcSetWebp":"/static/da35d9af2571d2a1c6262a5511cae04e/61503/vuzuk.webp 175w,\n/static/da35d9af2571d2a1c6262a5511cae04e/850cb/vuzuk.webp 350w,\n/static/da35d9af2571d2a1c6262a5511cae04e/93ec8/vuzuk.webp 700w,\n/static/da35d9af2571d2a1c6262a5511cae04e/0e6b6/vuzuk.webp 963w","sizes":"(max-width: 700px) 100vw, 700px"}}},"tech":["React","Express","NodeJS","Webpack","SSR"],"github":"https://github.com/vuzuk/webapp","external":"https://vuzuk.com/","show":"true"},"html":"<p>Vuzuk brings all the blogs and bloggers under one roof through which it becomes a lifestyle guidebook where reading enthusiasts can unveil the blogs, articles and reviews by a variety of bloggers around the world. Mainly in Food, Fashion, Tech &#x26; Travel.</p>"}},{"node":{"frontmatter":{"title":"KWIZ - Online Quiz Portal","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='400' height='202'%3e%3cpath d='M0 10v10h401V0H0v10m10 126v13l327-1 54-1h-96v-23H10v12m259 35c-6 2-13 9-17 15-2 4-3 6-4 13l-1 3h35v-33h-4l-9 2m14 14v17h34v-4c-3-15-15-27-29-29h-5v16m100-7c-5 2-8 7-6 12 1 4 3 5 9 5 9 0 11-12 3-16-3-2-4-2-6-1' fill='%2364ffda' fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.9814814814814814,"src":"/static/1959d6fcf107988d03334f92c82e0a7f/e8606/kwiz.png","srcSet":"/static/1959d6fcf107988d03334f92c82e0a7f/53aff/kwiz.png 175w,\n/static/1959d6fcf107988d03334f92c82e0a7f/1844f/kwiz.png 350w,\n/static/1959d6fcf107988d03334f92c82e0a7f/e8606/kwiz.png 700w,\n/static/1959d6fcf107988d03334f92c82e0a7f/c9f12/kwiz.png 1050w,\n/static/1959d6fcf107988d03334f92c82e0a7f/0ca5d/kwiz.png 1284w","srcWebp":"/static/1959d6fcf107988d03334f92c82e0a7f/93ec8/kwiz.webp","srcSetWebp":"/static/1959d6fcf107988d03334f92c82e0a7f/61503/kwiz.webp 175w,\n/static/1959d6fcf107988d03334f92c82e0a7f/850cb/kwiz.webp 350w,\n/static/1959d6fcf107988d03334f92c82e0a7f/93ec8/kwiz.webp 700w,\n/static/1959d6fcf107988d03334f92c82e0a7f/fbd0c/kwiz.webp 1050w,\n/static/1959d6fcf107988d03334f92c82e0a7f/bad56/kwiz.webp 1284w","sizes":"(max-width: 700px) 100vw, 700px"}}},"tech":["React","Node.js","Express","SPA"],"github":"https://github.com/varunzxzx/kwiz","external":"https://kwiz-msi.herokuapp.com/","show":"true"},"html":"<p>KWIZ is an online quiz portal dedicated for C++. It provides students to test their\nprogramming ability apart from the curriculum. It also has a resources section,\nwhere students get the required resources for the quiz. It engages the students by\nproviding valuable insights and a leaderboard.</p>"}}]},"projects":{"edges":[{"node":{"frontmatter":{"title":"babel-plugin-use-css","image":"","tech":["babel-plugin","CSS","React"],"github":"https://github.com/varunzxzx/babel-plugin-use-css","external":"","show":"true"},"html":"<p>Allow extracting static CSS from <a href=\"https://github.com/siddharthkp/use-css#readme\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">use-css</a></p>"}},{"node":{"frontmatter":{"title":"Sync Band","image":"","tech":["PWA","React","SocketIO"],"github":"https://github.com/varunzxzx/sync-band","external":"","show":"true"},"html":"<p>A progressive web application that sync the song lyrics and chords through out the band</p>"}},{"node":{"frontmatter":{"title":"Quick Spot","image":"","tech":["Node.js","Google Maps"],"github":"https://github.com/varunzxzx/quick-spot","external":"","show":"true"},"html":"<p>A NodeJS applications which finds nearest hospital with feasible travel time using Google Maps API.\nMore on: <a href=\"https://varunzxzx.github.io/quick-spot/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://varunzxzx.github.io/quick-spot/</a></p>"}}]},"blogPosts":{"edges":[{"node":{"frontmatter":{"title":"Writing My First Babel Plugin","date":"2019-06-11","slug":"/blog/writing-babel-plugin","tags":["babel-plugin","react","css"],"show":"true","authorName":"Varun","authorImg":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='400' height='400'%3e%3cpath d='M168 2a115 115 0 0 0-25 5c-6 1-8 2-14 7-4 3-6 6-5 6 1 1 0 2-2 4-5 4-7 12-6 21a245 245 0 0 0 14 46l4 12c3 9 3 15 1 18l-1 3h-1c-1-1-2 0-6 4l-4 4 3 2c2 1 2 1 1 2l-3-1c-1-1-3-1-2 1l-3 4-1-2c0-1-1-1-2 1-2 1-3 3-2 3 2 3 2 5 1 5-2-1-4 2-3 3l-4 4c-2 0-4 4-3 5l-1 1h-1c2 2 0 4-1 2h-1v2h-1c-1 2-5 2-6 1h-1l-1 2-2 2-1 1c0-1-1-1-3 1l-6 3-5 3-2 1-1 1-1 2c-3 3-5 7-5 13l-1 5 2-4c1-2 2-3 3-2l2-1 1-1h1v-3c0-2 0-2-1 0h-2c0-2 9-11 13-13l2-1 1 1h1l-1 1c-2 0-5 5-4 6l-1 1v1l-1 1c-2 0-2 3 0 5l2 3 1 2 1-2c0-2 0-2 2-2 1 1 1 0 1-3-1-3 0-4 1-4 2 0 2-1 2-3l1-2 1-2h4l1-1-1 3v6l-1 2-1 3-1 1c-2 0-1 2 1 2v3c1 1 1 1-1 1-2-1-2-1-1 2v5l-1 1-1 2c1 1 0 2-1 2v5l-1 2-2 2-1 1v2c-1 1 0 1 1 1s2 0 1 1v10c1 1 1 1-1 1h-2l3 1c2 1-3 1-10 1H62l-3 40c-2 30-2 32-4 31-2 0-3 0-4 4a349 349 0 0 0 0 62v2l2 1 5 4 5 4 1 1 2 3c1 1 0 4-2 3l-2 1-2 1-3-1-4-2-2-1c0 1 1 5 2 4l2 2v2l-1 2h5a9070 9070 0 0 0 244-1c-3-3-2-6 0-6 3 0 5 2 5 4v2l2 1h5l6-1c2 0 2-1 2-3 0-4 5-4 7 0 1 2 2 2 4 2 4-1 5-2 3-4-2-1-2-2-2-3l9-1c4-1 4-1 4-3s-5-4-6-3h-13c-2-3 2-8 4-6 3 2 3 0 1-3s-4-5-4-2l-5 1c-4-1-5-1-5 1l-1 1c-2 0-2-3 0-6l2-6c1-3 5-4 5-2s3 4 4 3l1-5c-2 0-3-7-2-9 2-2 2-2 0-4s-2-2-3 0c-2 5-4 6-15 5-3 0 0-3 3-5 4-1 5-2 5-6s0-5 3-6c5-1 7 0 7 4 0 2 1 2 3 1s2-4 1-5c-2-1-1-6 1-7s2-2-2-3c-2-1-4 0-5 1l-3 2-1-2-3-3c-2 0-2 1-2 5 0 7-1 8-2 4l-4-5-4-3-4-2c-2 0-4-3-3-5l-1-2-1 1-2 2-4 3-1 3h3c5-1 6 0 6 2v4c1 2 2 4 1 5-1 3-3 4-3 1 0-2 0-2-5-2-8 1-12 3-12 7l-1 6-1-1-1-1c-1 0-2-1-1-2l-3-4c-2 0-10 8-12 11l-1 2-3-3c-3-3-7-3-5 1l-1 2-4 4-3 3v-15c0-2 0-2-2-2l-2 2-2 2c-2 0-2-2-1-3v-2c-1-2-2-8 0-9s1-3-1-2l-2 3c0 3 0 3-3 3l-5 2c-4 1-7 1-5-2v-8c0-3 0-4-2-6s-2-2-1-3c2-1 3-3 1-5-4-3-2-67 3-79 3-10 3-14-2-26-5-15-15-38-18-42s-12-10-13-9l-1-1-1-2-3-4c-2-4-2-4-1-10 2-8 5-16 8-18l21-6c4-1 8-5 8-7l-2-5-2-7-1-4-1-7 1-6c2-2 1-7-1-9-2-1-2-2-1-2v-1c-2 0-2 0-1-2v-3l1-1c2 0 0-6-4-12l-6-10-2-4 2-4c3-4 3-14-1-19-2-3-11-8-16-9l-4-1c-2-1-6-2-16-1m121 336c1 1 0 3-4 18-2 7-1 8 5 7 5 0 7-1 7-5l1-9c2-7-1-13-6-13-2 0-3 1-3 2m-22 25l-7 3h-4c0-3-2-2-3 1l-4 2c-2 0-2 0 1 5 2 3 4 4 3 0 0-2 0-2 2-1s2 1 4-1c1-2 3-1 1 2-1 2 0 2 3 2 6 1 7 4 4 7l-2 3 4-2c1-1 5-1 9 1 3 1 2-2 0-4s-2-2-1-3c2-1 2-2 2-3v-3c0-2 3-3 3-1l1 2v-6c2-1 2-2 1-2l-5-2h-12m47 0l-3 1c-1-2-7 0-8 2 0 2 0 2-1 0h-3l-6 2c-4 1-5 2-3 4 1 1 2 1 5-1h4c1 1 1 1-1 2l-2 2-1 1c-2 1 0 4 2 4v5l2-2c1-2 3 0 3 2s1 2 3 2l5-2c2 0 3-3 1-5v-5h1c1 1 2-2 1-5s-1-4 3-3c2 0 3 0 3-2 1-3-1-4-5-2' fill='%2364ffda' fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1,"src":"/static/92b6f14c78faeca823577de6069e4edd/d0c79/me.jpg","srcSet":"/static/92b6f14c78faeca823577de6069e4edd/aff4f/me.jpg 8w,\n/static/92b6f14c78faeca823577de6069e4edd/39951/me.jpg 15w,\n/static/92b6f14c78faeca823577de6069e4edd/d0c79/me.jpg 30w,\n/static/92b6f14c78faeca823577de6069e4edd/064ab/me.jpg 45w,\n/static/92b6f14c78faeca823577de6069e4edd/c22e0/me.jpg 60w,\n/static/92b6f14c78faeca823577de6069e4edd/77599/me.jpg 2896w","srcWebp":"/static/92b6f14c78faeca823577de6069e4edd/e7d42/me.webp","srcSetWebp":"/static/92b6f14c78faeca823577de6069e4edd/a8891/me.webp 8w,\n/static/92b6f14c78faeca823577de6069e4edd/8ce52/me.webp 15w,\n/static/92b6f14c78faeca823577de6069e4edd/e7d42/me.webp 30w,\n/static/92b6f14c78faeca823577de6069e4edd/1050f/me.webp 45w,\n/static/92b6f14c78faeca823577de6069e4edd/4642e/me.webp 60w,\n/static/92b6f14c78faeca823577de6069e4edd/cf49e/me.webp 2896w","sizes":"(max-width: 30px) 100vw, 30px"}}},"featuredImg":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='400' height='225'%3e%3cpath d='M25 2l-4 2-2 1A917 917 0 0 0 3 19l-3 2v55l2-2c3-2 3-2 6 0 3 4 5 4 8 2s4-3 3-4 5-6 9-8a187 187 0 0 0 15-10l6 3c0 2 5 7 7 7s4 6 4 11c-1 4-1 4 2 6l5 1c3 1 2 3-3 7s-6 5-15 6H39l-1 2c0 2 0 3 1 2 3-1 3 4 1 7-6 8-17 10-22 4-3-4-2-4 2-2 10 7 21-2 15-13l-3-2-6 2c-5 0-5 0-5 4l1 5 1 2c-1 1-3-1-4-5l-1-4-2-2c-1-2-3-3-3-2l-12 8-1 11c0 9 0 10 2 10l13-1h18c4-3 22-5 21-3l1 1c2 1 1 3-1 3-2-1-3 1 0 2h3v-2h3c2-2 2-2-1-2-3-1-4-2-2-3l3 1c3 2 4 2 4 0v-1h2c2-1 2-1 1-2v-1c2 1 7-3 32-24a321 321 0 0 1 31-25 976 976 0 0 0 38-31c-6 3-7 4-11 4-5 0-6 0-4 4 2 1 1 2-9 9l-10 8-5-4c-4-3-5-3-3-4l8-7c2-1 2-2 1-5-1-4 0-5 8-5 6-1 7-1 9-3l6-2a3237 3237 0 0 0 16-1c0 1 4-1 10-6 16-12 16-12 15-15l2-4c1-3 1-3-2-3l-11 2-12 1h-4V1c1-1-1-1-11-1-11 0-12 0-13 2-1 4-7 6-13 6-5 0-7-1-9-6l-1-2H27l-2 2m181 0c-3 3-4 6-2 6 2-1 7 0 7 1l-5 3c-5 4-5 4-2 7 4 3 10 4 12 2 1-1 1-2-2-2-2 0-2 0 0-2l4-2c2 0 2 0 1 2-2 2-2 2 0 2l3 2c0 2 4 1 4-1 1-3 5-3 6 1 1 2 1 3-1 4-2 2-2 4 0 4l4 3c3 3 3 3 4 2s2-2 4-1l1-1v-1 7l1 2 4 3a341 341 0 0 0 30 21c1 0 0-2-3-4-4-4-5-5-1-3 3 2 7 2 21 2 10 0 11 1 15 3 2 2 4 3 5 2h1l1-1c-1-1 3-3 5-2 3 0 3 0-1 3l-4 4-1 1c-1-1-6 4-8 7l-2 4c-2 0-2-3 0-6l2-4 1-1c1-1 1-1-2-2-3-2-5-2-3 0 3 2 2 4 0 4s-5-2-5-4l2-2c1-2 1-2-5-1h-12c-5 0-5 0-3 2l9 8c3 2 4 3 5 2 1-2 8 1 7 3-2 4 0 13 3 16 2 2 3 0 2-3-1-2-1-2 2-5s5-3 5-1l2 3h1l2-1v1c-1 1-1 1 1 1s2 0-1 1l-5 4c-3 3-3 3-2 5l3 1-1-2c-2-1-1-3 2-3 2-1 3 2 0 4-1 2-1 2 1 3s3 1 2-3h2l2-1 1-1c2 0 3 1 4 3s1 2 3 0l2-1-2-2c-4-3-4-4 0-3 4 0 5 1 5 4l-1 2-1 2c0 2 0 3 3 0 1-2 2-2 3-1 2 2 2 4-2 8-3 3-3 3-10 1l-2 1-3 5-2 3c1 0-3 4-5 4l-1 1c1 1-3 4-4 4l-1 1-3 2-2 2c0 2 0 3-3 4l-3 2-4 5a235 235 0 0 0-15 13l-9 8a642 642 0 0 1-65 56l-3 3h23l1-3 37-34c41-36 81-69 87-73 3-2 5-6 5-9 1-3-1-2-5 2-6 6-9 7-9 6-1-1 4-11 7-12l3-2-4-2-6-2c-3 0-6-3-5-3l-1-1h-1l1-1c2 0 0-2-6-6-13-11-13-11-12-13 0-3 2-2 5 0 2 2 2 2 3 1l3-1c1 1 2 0 3-1 2-2 2-2 6 1s4 3 6 2c1-1 2-3 1-4 0-2-6-8-6-7l-4-3c-3-3-5-4-7-4-2 1-7-2-46-30-19-14-21-16-21-18s3-1 9 3l7 5 1 1s1 2 3 2l3 1c0-3 0-4 2-4v5l1 1c-1 0 0 2 2 3a130 130 0 0 1 13 10l3 3 3 2 7 4c5 4 6 5 6 3 1-2 4-1 3 2 0 2 3 4 7 5 3 0 13 7 14 10 2 3 3 4 3 2l2-2 45-5h4v-9c0-10-1-14-2-12h-2c-2-1 0-4 3-4v-6l1-23V0h-46c-48 1-52 1-56 4-2 2-2 2-3 0l-2-3-16-1c-16 0-16 0-15 2 2 2 0 5-2 3-5-3-7-4-12-4l-5-1-2 3c-2 5-2 5 0 7 2 3 3 2 5-1 2-1 3-2 4-1 3 1 2 4-1 6-5 4-5 5-1 4 6-1 8 3 8 12-1 8 1 10 4 8s4-2 10 2c7 5 12 9 12 11 0 3-4 5-7 3l-12-8c-3-3-6-3-4 0 2 2-1 1-4-3-5-4-5-6-5-13 1-8-4-14-8-9l-2 1-3-4-4-4c0-2-3-4-9-8-9-7-15-8-18-4m-99 7c-4 4-4 11 0 14 2 2 9 3 14 1 10-3 10-18 0-18h-3l3 2c3 2 6 6 5 7l-6-4c-7-6-9-6-13-2m244-2v3c1 1-2 4-4 5h-2l1-1v-2c-1-2-4 2-2 4 1 2 5 2 16 0 5-1 11-4 7-4l-2-1c-1-1-5-2-7-1-1 1-2 0-2-1-1-3-4-4-5-2M87 23c-6 4-7 11-2 16 3 3 8 4 15 1 9-4 7-18-2-18h-3l3 2c2 0 4 2 5 4s1 3-3 0c-6-4-10-6-13-5m89 13l-7 5c-9 7-15 23-11 27l3-2 5-2 7-4 12-10c2 0 0 3-7 8l-8 8h2a505 505 0 0 1 21-17c4-4 8-3 17 4l9 7 2 1c2-2 6 1 21 12 16 13 17 13 16 17l1 2c2-1 22 15 24 18s2 3-6 10c-18 16-17 14-15 17 1 1 2 3 1 5 0 2 2 3 4 1l8-3c8-2 9-3 16-10 6-5 6-6 2-16-2-5-3-6-5-7l-3-2-10-10-12-11a333 333 0 0 0-59-42l-14-5c-11-2-11-2-14-1M62 43c-4 3-4 9 0 13 3 4 13 3 19-1 5-5 2-16-5-16-1 0-1 1 1 2 3 1 5 6 4 7l-6-4c-6-6-8-6-13-1m88 33c-7 6-7 6-12 5-4 0-5 0-8 3-1 2-3 3-3 2l-2 2-1 2c-1-1-3 1-24 18-19 16-20 17-18 21 2 3 7 8 8 6h1v1c0 2 4 6 7 6l2-2 1-1 1 1 1 2 1 1 1 1h1l1 1 4 2v2c-3 0-4 3-2 4h3c0-3 2-3 4-1l3 2-4 1c-4 0-4 1 4 7l20 16c13 11 13 11 15 9 2-3 5-1 3 2-1 2 0 4 2 3 1-1 3 1 5 2l6 5v2c-2 1 4 7 9 8s6 1 18-10l24-20c4 0 4-2 0-5l-4-2-19 17c-3 4-8 6-11 5-2 0-13-9-22-18-4-4-4-5 0-5 2 1 3 0 3-1 0-2 0-2-7-1l-6-4a336 336 0 0 0-40-31c-12-10-13-11-7-16a534 534 0 0 1 20-20c-2-3-1-5 5-9 5-4 7-5 9-3l3-1 4-2 2-1v-1c1 2 2 1 1-1h3v-2h1l3-2v-1l-1-1c2-4-1-4-8 2m40 13l2 1 2 1 6 1c8 1 9 2 4 4l-48 16c-12 3-12 3-9 4 1 2 1 2-1 3s-2 1 3 1l5-1h3c1 1 1 1-1 1-6 0 17 7 27 8 21 2 28 1 30-7v-3l6 1c20 2 26-13 9-23-9-5-17-7-29-7h-9m176 3c-3 2-3 3-2 4v1h-3c-1 1 0 2 1 4 1 1 3 4 3 7l2 3 1-2 31 21c1 1 1 0 1-6v-7l-6-5c-8-5-8-6-4-6 8 0 10-1 10-5s0-4-3-4l-25 3v-8c1-5-1-5-6 0m-156 9l-14 6 7 3c8 2 24 3 26 0 3-2-6-11-11-11l-8 2m-39 12l-9 4c1 3 30 7 37 6 7-2 4-6-6-10-9-3-10-3-22 0m192 0l-11 9a554 554 0 0 0-56 49 401 401 0 0 1-33 30 308 308 0 0 0-14 12c-2 0-1 2 1 2l2 1c0 2-2 2-3 1-2-2-2-2-7 2-6 5-6 6-2 6l2-1v-1h2c0 2 2 2 6 2 6 0 7 0 6-2 0-2 1-3 6-6 5-4 7-4 20-6l15-2 2-2c2-4 5-7 9-8 3 0 4 0 8 4l7 5 4 3c2 3 2 3 1 6l-5 6-3 2h14c13 0 14 0 15-2 1-1 2-3 1-4h1c3 0 2 4 0 5-1 1 1 1 9 1 11 0 11 0 15-3 4-4 4-4 7 0 3 3 3 3 10 3 9 0 9 1 9-14l-1-8-2 2-2-1c-1 0 0-4 2-5 3 0 3-2 3-33 0-16 0-27-1-24 0 4 0 4-5 4-4 1-5 0-18-10l-13-12c1-6 0-15-1-11m-94 5a1971 1971 0 0 1-10 12c13-10 15-13 15-14 0-2 0-3-5 2m-222 5l1 2v1c-2-1-2 0-2 1l1 2h1l-2 2-1-1-1-1-1-2v-1c-2 0-2 3 0 4l2 3-3-2-2-1-1 1c-2-1-1 0 1 2 1 2 1 2-5 2-3 0-3 2 0 5l1 2h-2c1 0 0 2-2 3l-3 3-2-2-2-2c-1 1 0 2 1 3l1 2c-1 1-3 0-4-1l-2-2v8c-2 2-3 2-4 0l-3-2c-2 0 0-2 7-8 6-5 9-6 9-5l1 2v-4l1-1-16 2-15 1v25l1 26v1c-2 0-1 6 2 9l3 2 1 1v5H6l-3 1c-3-1-3 2 1 5 3 3 3 3 4 2 0-2 1-2 1-1h3v-2c-2-1-2-1 0-3s3-3 2-4c-2-3-1-8 1-10 3-4 3-4-1-7l-3-2 3-3c3-2 4-3 4 0l1 1c3 0 3 3 1 4l-1 2 3-2 2-1c0 2 12 12 13 11l-4-6-1-1-1-2v-1c3 0 8 3 10 8 1 4 1 5-1 10h1c2-2 3-1 3 1l2 7c2 4 2 10 0 9h-1c-1 1 8 1 25 1l26-1 1-3h-2l-9 2c-9 0-14-5-14-12 0-3 0-4-2-4-3 0-8-5-8-8v-13l-1-17-1-6 6 5a147 147 0 0 0 16 14c4 4 6 5 8 5 3-2 2-3-5-10-17-15-21-18-23-17-3 1-4-3-4-11l1-8-3-3-7-3c-2 0-5-2-2-2 2 0 7-6 6-7l-1-1-3-1c0-2-1-2-2-1m304 14a193 193 0 0 1-15 14l7 1 26-3-5-5c-10-7-11-8-13-7m41 32l-18 2-16 2-4 4-5 6c0 3-1 2-6 0-9-7-24-1-23 9 0 6 4 12 8 13 5 1 11 1 14-1l5-2v7c-3 6-3 7-1 9 1 1 1 1 2-1h3l2 1c1-1 5-2 16-3 6 0 8-1 10-2 1-2 1-2 4 1l3 5c0 2 4 1 6-2s3-4 2-5c-1-2 0-4 2-1 2 2 4-1 2-4-3-4-12 0-9 5 2 4 0 3-2-1l-3-3 4-4 3-4c-1-1-23 1-29 2l-13 1 6-8 11-12c3-4 6-5 27-7h7v-4c0-4 0-4-3-4l-5 1M91 194c-2 2-2 2 4 5 5 3 7 5 7 11-1 6 0 6 5 1l4-5 2 2a510 510 0 0 0 23 17h5l-5-4a191 191 0 0 0-27-22c-2-2-4-3-4-1l2 2 2 2c0 1-5-1-6-3l-2-2-4-3c-2-3-3-3-6 0m-54 16l-8 3-5 2 2 3c1 4 1 7-2 6l-5-7c1-3-4-6-6-4l1 1c3-1 3 0 1 3-1 3-1 3 1 5 1 3 2 3 12 3l13-1v-7l-1-1v-5c0-4 0-4-3-1' fill='%2364ffda' fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.779047619047619,"src":"/static/2876ea1893fe2d51012a49e6707de1a8/00384/babel.jpg","srcSet":"/static/2876ea1893fe2d51012a49e6707de1a8/4b397/babel.jpg 75w,\n/static/2876ea1893fe2d51012a49e6707de1a8/cb731/babel.jpg 150w,\n/static/2876ea1893fe2d51012a49e6707de1a8/00384/babel.jpg 300w,\n/static/2876ea1893fe2d51012a49e6707de1a8/348bc/babel.jpg 450w,\n/static/2876ea1893fe2d51012a49e6707de1a8/9429d/babel.jpg 600w,\n/static/2876ea1893fe2d51012a49e6707de1a8/8844a/babel.jpg 934w","srcWebp":"/static/2876ea1893fe2d51012a49e6707de1a8/ebb2f/babel.webp","srcSetWebp":"/static/2876ea1893fe2d51012a49e6707de1a8/72cf8/babel.webp 75w,\n/static/2876ea1893fe2d51012a49e6707de1a8/c7a37/babel.webp 150w,\n/static/2876ea1893fe2d51012a49e6707de1a8/ebb2f/babel.webp 300w,\n/static/2876ea1893fe2d51012a49e6707de1a8/038bc/babel.webp 450w,\n/static/2876ea1893fe2d51012a49e6707de1a8/fabdf/babel.webp 600w,\n/static/2876ea1893fe2d51012a49e6707de1a8/cf71d/babel.webp 934w","sizes":"(max-width: 300px) 100vw, 300px"}}}},"timeToRead":12,"excerpt":"Before digging into Babel plugin, Let’s understand Babel and How It Works? Babel is a transpiler which converts your ES20XX, JSX and such code to ES2015 for better browser compatibility. As new APIs are introduced frequently and the language standards keeps updating, Browsers doesn’t updates itself…","html":"<p>Before digging into Babel plugin, Let’s understand Babel and How It Works? Babel is a transpiler which converts your ES20XX, JSX and such code to ES2015 for better browser compatibility. As new APIs are introduced frequently and the language standards keeps updating, Browsers doesn’t updates itself at such pace. Here Babel comes to the rescue. It allows developers to use modern language features without worrying about the browser compatibility.</p>\n<p>You have been using Babel , If you ever built a React app. React uses JSX which is not a standard Javascript syntax. It is Babel which converts all your wonderful JSX to something which browsers can understand. Babel is not limited to only JSX or React. It supports all modern APIs like async/await.</p>\n<h2>How It Works?</h2>\n<p>Babel goes through 3 major stages in order to perform this magic:</p>\n<ol>\n<li>Parse</li>\n<li>Transform</li>\n<li>Generate</li>\n</ol>\n<h4>Parse</h4>\n<p>The parse stage, takes code and outputs an Abstract Syntax Tree or AST.</p>\n<blockquote>\n<p>“an <strong>abstract syntax tree (AST)</strong>, or just <strong>syntax tree</strong>, is a tree representation of the abstract syntactic structure of source code” - Wikipedia</p>\n</blockquote>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The AST representation of the above program looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\"><span class=\"token list punctuation\">-</span> FunctionDeclaration:\n  <span class=\"token list punctuation\">-</span> id:\n<span class=\"token code keyword\">    - Identifier:</span>\n<span class=\"token code keyword\">      - name: square</span>\n  <span class=\"token list punctuation\">-</span> params [1]\n<span class=\"token code keyword\">    - Identifier</span>\n<span class=\"token code keyword\">      - name: n</span>\n  <span class=\"token list punctuation\">-</span> body:\n<span class=\"token code keyword\">    - BlockStatement</span>\n<span class=\"token code keyword\">      - body [1]</span>\n<span class=\"token code keyword\">        - ReturnStatement</span>\n<span class=\"token code keyword\">          - argument</span>\n<span class=\"token code keyword\">            - BinaryExpression</span>\n<span class=\"token code keyword\">              - operator: *</span>\n<span class=\"token code keyword\">              - left</span>\n<span class=\"token code keyword\">                - Identifier</span>\n<span class=\"token code keyword\">                  - name: n</span>\n<span class=\"token code keyword\">              - right</span>\n<span class=\"token code keyword\">                - Identifier</span>\n<span class=\"token code keyword\">                  - name: n</span></code></pre></div>\n<p>Or as a JavaScript Object like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"FunctionDeclaration\"</span><span class=\"token punctuation\">,</span>\n  id<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Identifier\"</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"square\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  params<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Identifier\"</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"n\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  body<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"BlockStatement\"</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n      type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"ReturnStatement\"</span><span class=\"token punctuation\">,</span>\n      argument<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"BinaryExpression\"</span><span class=\"token punctuation\">,</span>\n        operator<span class=\"token punctuation\">:</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span>\n        left<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Identifier\"</span><span class=\"token punctuation\">,</span>\n          name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"n\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        right<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Identifier\"</span><span class=\"token punctuation\">,</span>\n          name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"n\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>Note: Some properties have been removed for simplicity.</p>\n</blockquote>\n<h4>Transform</h4>\n<p>The transform stage takes an AST and traverses through it, adding, updating, and removing nodes as it goes along. This is where Babel plugins operate. We’ll come back to this section later.</p>\n<h4>Generate</h4>\n<p>The code generation stage takes the final AST and turns it back into a string of code.</p>\n<h2>Babel Plugin</h2>\n<p>Now when we know how babel operates, let’s dig deep into babel plugins. Babel plugins allows the developers to transform their code anyhow they want. Babel abstracts the complex operations of parsing and generating the code and exposes a set of magical APIs to transform the code as we want. We’ll use these APIs to build our plugin.</p>\n<p>As you already know now, that Babel plugins operates in the <strong>transform</strong> stage. In this stage, we get an object like representation of the code. So, we just need to manipulate that object to change the code.</p>\n<p>Let’s start writing our babel plugin. So, there is a tiny css-in-js library called <a href=\"https://github.com/siddharthkp/use-css#readme\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">use-css</a> by <a href=\"https://twitter.com/siddharthkp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">siddharthkp</a>. Here is a small demo of it:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> useCSS <span class=\"token keyword\">from</span> <span class=\"token string\">'use-css'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Oopsy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> className <span class=\"token operator\">=</span> <span class=\"token function\">useCSS</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`\n    font-size: 21px;\n    font-style: italic;\n    color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>props<span class=\"token punctuation\">.</span>color<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n    &amp;:hover {\n      font-weight: bold;\n    }\n  `</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>className<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>because why not<span class=\"token operator\">?</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Oopsy color<span class=\"token operator\">=</span><span class=\"token string\">\"green\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We’ll create a babel plugin which extracts all the css and puts it in static file because why not :P\nNow, comes the question how will you handle dynamic values like one in the above example. Well I’ve a magic spell for it as well XD.</p>\n<p>Our plugins begins with a function which receives the current babel instance as an argument.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">babel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// plugin contents</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then we return an object with a property visitor</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">babel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    visitor<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// visitor contents</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, what is a <strong>visitor</strong>? In the transform stage(where our plugin operates), babel traverse through the tree means it will visit each node. <strong>Visitor</strong> is an object with some methods which will be invoked by babel once the particular type of node is found. You can see in the object representation of AST above, every node has certain type. We’ll be using this information to build our visitor.\nIt’ll be more clear by the following example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> MyVisitor <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">Identifier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Called!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, the Identifier method will be called every time babel visits a node of type “Identifier”. These visitor methods receives path of the node as argument. To know about different types of node, you can use <a href=\"https://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST explorer</a>. This is going to be your most used resource while building a babel plugin. To manipulate any object you should know the structure of the object. You can view the AST representation of any code with this tool which is very handy.</p>\n<p>For our plugin we need to get all the “useCSS” call because then we’ll be able to get all the styles, and put it in a static style. Then, we will replace the function call with a class name and remove all imports. So the following code</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> useCSS <span class=\"token keyword\">from</span> <span class=\"token string\">'use-css'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Oopsy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> className <span class=\"token operator\">=</span> <span class=\"token function\">useCSS</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`\n    font-size: 21px;\n    font-style: italic;\n    &amp;:hover {\n      font-weight: bold;\n    }\n  `</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>className<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>because why not<span class=\"token operator\">?</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Oopsy color<span class=\"token operator\">=</span><span class=\"token string\">\"green\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>will be transformed to</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Oopsy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> className <span class=\"token operator\">=</span> “<span class=\"token number\">4</span>vg68s”\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>className<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>because why not<span class=\"token operator\">?</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Oopsy color<span class=\"token operator\">=</span><span class=\"token string\">\"green\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>and all the styles will be moved to bundle.css. For the dynamic values, we’ll be using css variables(magic spell). For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> useCSS <span class=\"token keyword\">from</span> <span class=\"token string\">'use-css'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Oopsy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> className <span class=\"token operator\">=</span> <span class=\"token function\">useCSS</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`\n    font-size: 21px;\n    font-style: italic;\n    color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>props<span class=\"token punctuation\">.</span>color<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n    &amp;:hover {\n      font-weight: bold;\n    }\n  `</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>className<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>because why not<span class=\"token operator\">?</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Oopsy color<span class=\"token operator\">=</span><span class=\"token string\">\"green\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>will be transformed to:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Oopsy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> className <span class=\"token operator\">=</span> “<span class=\"token number\">4</span>vg68s”\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>className<span class=\"token punctuation\">}</span> style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>“<span class=\"token operator\">--</span>sj55zd”<span class=\"token punctuation\">:</span> props<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    because why not<span class=\"token operator\">?</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Oopsy color<span class=\"token operator\">=</span><span class=\"token string\">\"green\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//bundle.css</span>\n<span class=\"token number\">.4</span>vg68s<span class=\"token punctuation\">{</span>\nfont<span class=\"token operator\">-</span>size<span class=\"token punctuation\">:</span><span class=\"token number\">21</span>px<span class=\"token punctuation\">;</span>\nfont<span class=\"token operator\">-</span>style<span class=\"token punctuation\">:</span>italic<span class=\"token punctuation\">;</span>\ncolor<span class=\"token punctuation\">:</span><span class=\"token keyword\">var</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>sj55zd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token number\">.4</span>vg68s<span class=\"token punctuation\">:</span>hover <span class=\"token punctuation\">{</span>\nfont<span class=\"token operator\">-</span>weight<span class=\"token punctuation\">:</span>bold<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To get all the “useCSS” function call we will simply do this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">babel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    visitor<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">CallExpression</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>callee<span class=\"token punctuation\">.</span>name <span class=\"token operator\">!==</span> <span class=\"token string\">'useCSS'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// do the thing</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>CallExpression</strong> is the node type which we need and the <strong>callee</strong> property of that node gives us the function name. Again, I used AST Explorer to find all the properties of the node.\nNow, we need the template literal(styles) passed to the function. For that we are going to traverse its child nodes and get the styles.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">babel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    visitor<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">CallExpression</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>callee<span class=\"token punctuation\">.</span>name <span class=\"token operator\">!==</span> <span class=\"token string\">'useCSS'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        path<span class=\"token punctuation\">.</span><span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// nested visitor</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>“traverse” method is used to traverse child nodes of a node. It takes a “visitor” object. Now, In this visitor we only need the template literal. So,</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">babel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    visitor<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">CallExpression</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>callee<span class=\"token punctuation\">.</span>name <span class=\"token operator\">!==</span> <span class=\"token string\">'useCSS'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        path<span class=\"token punctuation\">.</span><span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          <span class=\"token function\">TemplateLiteral</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// do the thing</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, template literals have two main properties that we’ll be using, “quasis” and “expressions”. Both these properties are an array. “quasis” contains the string part of the string literal and “expressions” contains the variables used in the string literal. For example the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token template-string\"><span class=\"token string\">`I love </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>theThing<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> and </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>anotherThing<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>will be represented as:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  “type”<span class=\"token punctuation\">:</span> “TemplateLiteral”<span class=\"token punctuation\">,</span>\n  “quasis”<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>“<span class=\"token constant\">I</span> love”<span class=\"token punctuation\">,</span> “and”<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  “expressions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>“theThing”<span class=\"token punctuation\">,</span> “anotherThing”<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>Note: The values are not stored as array of strings but array of nodes. But, we can get these values from the nodes.</p>\n</blockquote>\n<p>What if we don’t have any variable in the string literal. Then the “expressions” will be empty and “quasis” will only have one node(whole string).\nLet’s write the code to merge these values to get the style</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">TemplateLiteral</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> templateLiteral <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">;</span> <span class=\"token comment\">//get the node</span>\n  <span class=\"token keyword\">const</span> quasis <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>templateLiteral<span class=\"token punctuation\">.</span>quasis<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//get the quasis</span>\n  <span class=\"token keyword\">let</span> staticStyle <span class=\"token operator\">=</span> “”<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// check whether it includes variables or not</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>quasis<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   quasis<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// the last quasis is marked as tail in AST</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>el<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> expr <span class=\"token operator\">=</span> templateLiteral<span class=\"token punctuation\">.</span>expressions<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// check whether the value is an object’s property</span>\n      <span class=\"token comment\">// or a normal variable(babel’s api, more on it later)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">isMemberExpression</span><span class=\"token punctuation\">(</span>expr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        value <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>expr<span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>expr<span class=\"token punctuation\">.</span>property<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        value <span class=\"token operator\">=</span> expr<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// We are going to use this ‘value’ variable later on.</span>\n      <span class=\"token comment\">// It stores the name of the variable.</span>\n    <span class=\"token punctuation\">}</span>\n    staticStyle <span class=\"token operator\">+=</span> el<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>cooked<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    staticStyle <span class=\"token operator\">=</span> quasis<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>cooked<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>Note: I am not going to describe all the properties of the nodes. <a href=\"http://astexplorer.net\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Explorer</a> is the best 😄</p>\n</blockquote>\n<p>The above code gets all the string parts(quasis) and store it to the variable <strong>staticStyle</strong>. I’ve only showed how to get the variables but we are not using it yet. Now, if you notice, I am getting the value from <strong>expressions</strong> when the quasis tail(property of that node) is falsy. Because the tail quasis represents the end of the string(there is no variable after it).</p>\n<p>Now, we need to do two things to handle dynamic values.</p>\n<ol>\n<li>Generate a random css variable(It must be unique)</li>\n<li>Add that variable to the style attribute in the JSX</li>\n</ol>\n<p>We are going to use the same hash library used by use-css to create unique css variables. The second step is little complex. We need to add the css variable and its value to the JSX which needs that dynamic style. But, How to find that JSX?</p>\n<p>The only way to find the required JSX is to find the variable which is defined in usercode. If you look at the demo of the use-css above. The <strong>useCSS</strong> function returns the class name and the user stores it in a variable and uses it in the JSX. We are going to trace this variable to get to the JSX.\nNow, comes another issue. We are in the useCSS function call visitor in our plugin. So, how to reach the JSX which resides somewhere else, within the same visitor. Well it is not possible. So, we’ll store the required information somewhere and make a new visitor for JSX and will use the stored information to manipulate the JSX.</p>\n<p>What is the information we are going to store. We need three values for this</p>\n<ol>\n<li>The variable in the usercode(to find the JSX)</li>\n<li>The css variable which we generated</li>\n<li>The value our css variable holds</li>\n</ol>\n<p>Let’s write the code for it</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> hash <span class=\"token keyword\">from</span> <span class=\"token string\">\"@emotion/hash\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> styles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">TemplateLiteral</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">const</span> identifier <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span>parentPath<span class=\"token punctuation\">.</span>parentPath<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token operator\">...</span>\n    <span class=\"token comment\">// generating unique css variable name</span>\n    cssVarName <span class=\"token operator\">=</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// adding it to the style</span>\n    el<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>cooked <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token string\">`var(--</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>cssVarName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)`</span></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// add the css variabe name with its value to</span>\n    <span class=\"token comment\">// the styles obj(dynamic styles)</span>\n    styles<span class=\"token punctuation\">[</span>identifier<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>cssVarName<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Babel provides the parent path of the node so I used it to get to the user code variable. Also, I am storing the usercode variable as keys in the <strong>styles</strong> object because it will be used to find the JSX. Now, we can find the required JSX. Let’s jump into the code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">babel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> t <span class=\"token operator\">=</span> babel<span class=\"token punctuation\">.</span>types<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    visitor<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      …<span class=\"token punctuation\">,</span>\n      <span class=\"token function\">JSXAttribute</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>type <span class=\"token operator\">!==</span> <span class=\"token string\">\"JSXExpressionContainer\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>styles<span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>expression<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> identifier <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>expression<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// add style attribute to JSX for dynamic styles</span>\n        path<span class=\"token punctuation\">.</span>parentPath<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n          t<span class=\"token punctuation\">.</span><span class=\"token function\">JSXAttribute</span><span class=\"token punctuation\">(</span>\n            t<span class=\"token punctuation\">.</span><span class=\"token function\">JSXIdentifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"style\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            t<span class=\"token punctuation\">.</span><span class=\"token function\">JSXExpressionContainer</span><span class=\"token punctuation\">(</span>\n              t<span class=\"token punctuation\">.</span><span class=\"token function\">ObjectExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n                t<span class=\"token punctuation\">.</span><span class=\"token function\">ObjectProperty</span><span class=\"token punctuation\">(</span>\n                  t<span class=\"token punctuation\">.</span><span class=\"token function\">StringLiteral</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`--</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>styles<span class=\"token punctuation\">[</span>identifier<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                  t<span class=\"token punctuation\">.</span><span class=\"token function\">Identifier</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">[</span>identifier<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>That’s a lot of code. Let’s break it down. So, I am searching for the <strong>JSXAttribute</strong> and the first “if” early exits the function if the attributes value is not a user defined variable. Now, the second “if” checks whether we have something to modify in that node. We do this by simply checking whether we have any entry for that user defined variable in our styles object. Because we don’t need to alter the JSX which is not using any dynamic styles.</p>\n<p>Once we pass these tests, we start altering the node. Now, here we are doing something little different. Earlier, we get some information from the node but now we have to build a node i.e. the JSX style attribute.\nAs I said, Babel provides some magical APIs to make our life a lot easier. We can do this using the builder methods from “babel.types”. We also used one helper function before as well from “babel.types” when we are extracting styles from the string literal. The method name for a builder is simply the name of the node type you want to build except with the first letter lowercased. For example if you wanted to build a MemberExpression(node type) you would use</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> t <span class=\"token operator\">=</span> babel<span class=\"token punctuation\">.</span>types<span class=\"token punctuation\">;</span>\nt<span class=\"token punctuation\">.</span><span class=\"token function\">memberExpression</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The arguments of these builders are decided by the node definition, they can all be found here.\nA node definition looks like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">defineType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MemberExpression\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  builder<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"object\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"property\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"computed\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  visitor<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"object\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"property\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  aliases<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Expression\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"LVal\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>By looking at the <strong>builder</strong> property, you can see the 3 arguments that will be needed to call the builder method (t.memberExpression).\nThis looks pretty simple for <strong>MemberExpression</strong>. But, here we are building a JSX Attribute. I want you to explore how this attribute is built(Use <a href=\"https://github.com/babel/babel/tree/master/packages/babel-types/src/definitions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">node definitions</a> and <a href=\"http://astexplorer.net\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Explorer</a> for reference)</p>\n<p>We forgot to save our styles to a css file. Let’s do it now.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> writeFile <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">babel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    visitor<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          staticStyle <span class=\"token operator\">=</span> quasis<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>cooked<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bundle.css\"</span><span class=\"token punctuation\">,</span> staticStyle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This will generate put all the static styles to <strong>bundle.css</strong>. But, the library also accepts scss like syntax and the styles doesn’t includes any class name yet. So, we have to pre-process it as well. We are going to use the same pre-processor used by use-css and the same hashing library to generate classnames.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getClassName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">styles</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"c\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">babel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    visitor<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          staticStyle <span class=\"token operator\">=</span> quasis<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>cooked<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// convert string literal into string</span>\n        <span class=\"token keyword\">const</span> finalStaticStyle <span class=\"token operator\">=</span> staticStyle<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\r?\\n|\\r|\\s/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        className <span class=\"token operator\">=</span> <span class=\"token function\">getClassName</span><span class=\"token punctuation\">(</span>finalStaticStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> rawCSS <span class=\"token operator\">=</span> <span class=\"token function\">stylis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span> <span class=\"token operator\">+</span> className<span class=\"token punctuation\">,</span> finalStaticStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bundle.css\"</span><span class=\"token punctuation\">,</span> rawCSS<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now our babel plugins saves all the css to a static file while managing the dynamic styles as well. So, if we have done all this job during the build time. Why to repeat pre-processing, hashing etc. in the runtime. We need to remove all the useCSS calls and replace it with the classname which we’ve generated.\nTo do this I’ll simply use the helper method provided by babel. You can find all the babel helper functions <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">path<span class=\"token punctuation\">.</span><span class=\"token function\">replaceWith</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">StringLiteral</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We are done with 99.9% of the work. We’ve to remove the use-css imports as well. I got tired writing this blog post 😅. So, I handover this task to you ✌️.\nThe complete plugin can be found <a href=\"https://github.com/varunzxzx/babel-plugin-use-css\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p>\n<p>By building babel plugin, you feel like you’ve unlocked some new skills. The community has built various cool things like codemods and stuff. The only thing you need to do is to love ASTs 😉.</p>\n<p>I used <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">babel-plugin handbook</a> and <a href=\"https://astexplorer.net\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Explorer</a> as a reference while building this plugin. You can’t get better resources than these two. I highly suggest you to read the handbook, it includes all the APIs which you need to build the plugin.</p>\n<p>Kindly ping me <a href=\"https://twitter.com/varunzxzx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@varunzxzx</a> if you build something amazing. I’ll be super happy if my post inspires someone.</p>"}}]},"contact":{"edges":[{"node":{"frontmatter":{"title":"Get In Touch"},"html":"<p>Although I'm not currently looking for freelance opportunities, my inbox is always open. Whether for a potential project or just to say hi, I'll try my best to answer your email!</p>"}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}